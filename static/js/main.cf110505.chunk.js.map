{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","next","setNext","answer","setAnswer","operator","setOperator","previous","setPrevious","equalUsed","setEqualUsed","handleNumber","e","num","target","innerHTML","handleOperator","calculate","ans","parseFloat","Math","floor","toString","className","type","id","value","disabled","onClick","includes","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf110505.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [ next, setNext ] = useState(0);\n  const [ answer, setAnswer ] = useState(0);\n  const [ operator, setOperator ] = useState(null);\n  const [ previous, setPrevious ] = useState(null);\n  const [ equalUsed, setEqualUsed ] = useState(false);\n\n  const handleDot = (e) => {\n    if(next === 0 || !next.includes('.')) {\n      setNext(next + '.');\n    }\n  }\n  const handleNumber = (e) => {\n    let num = e.target.innerHTML;\n    if(next === 0 || next === '0') {\n      setNext(num);\n    } else {\n      setNext(next + num);\n    }\n    setEqualUsed(false);\n  }\n  const handleOperator = (e) => {\n    if(equalUsed) {\n      setOperator(e.target.innerHTML);\n      return;\n    }\n    if(operator) {\n      if(next === 0 && e.target.innerHTML === '-') {\n        setNext('-');\n        return;\n      }\n      if(next === '-') {\n        setNext(0);\n        setOperator(e.target.innerHTML);\n        return;\n      }\n      setOperator(e.target.innerHTML);\n\n      if(typeof previous === 'string' && typeof next === 'string') {\n        calculate();\n        setOperator(e.target.innerHTML);\n      }\n    } else {\n      setOperator(e.target.innerHTML);\n      setPrevious(next);\n      setNext(0);\n    }\n  }\n  const handleClear = (e) => {\n    setNext(0);\n    setAnswer(0);\n    setOperator(undefined);\n    setPrevious(undefined);\n  }\n  const handleEquals = (e) => {\n    calculate();\n  }\n  const calculate = () => {\n    let ans;\n    switch(operator){\n      case '+':\n        ans = parseFloat(previous) + parseFloat(next);\n        break;\n      case '-':\n        ans = parseFloat(previous) - parseFloat(next);\n        break;\n      case '*':\n        ans = parseFloat(previous) * parseFloat(next);\n        break;\n      case '/':\n        ans = Math.floor((parseFloat(previous) / parseFloat(next)) * 10000) / 10000;\n        break;\n        default:\n          break;\n        }\n    setAnswer(ans);\n    setNext(0);\n    setPrevious(ans.toString());\n    setOperator(null);\n    setEqualUsed(true);\n  }\n  return (\n    <div className=\"app\">\n      <input type=\"text\" id=\"display\" value={next === 0 ? answer : next} disabled/>\n      <div className=\"buttons\">\n        <button id=\"equals\" type=\"button\" onClick={handleEquals}>=</button>\n        <button id=\"zero\" type=\"button\" onClick={handleNumber}>0</button>\n        <button id=\"one\" type=\"button\" onClick={handleNumber}>1</button>\n        <button id=\"two\" type=\"button\" onClick={handleNumber}>2</button>\n        <button id=\"three\" type=\"button\" onClick={handleNumber}>3</button>\n        <button id=\"four\" type=\"button\" onClick={handleNumber}>4</button>\n        <button id=\"five\" type=\"button\" onClick={handleNumber}>5</button>\n        <button id=\"six\" type=\"button\" onClick={handleNumber}>6</button>\n        <button id=\"seven\" type=\"button\" onClick={handleNumber}>7</button>\n        <button id=\"eight\" type=\"button\" onClick={handleNumber}>8</button>\n        <button id=\"nine\" type=\"button\" onClick={handleNumber}>9</button>\n        <button id=\"add\"type=\"button\" onClick={handleOperator}>+</button>\n        <button id=\"subtract\" type=\"button\" onClick={handleOperator}>-</button>\n        <button id=\"multiply\" type=\"button\" onClick={handleOperator}>*</button>\n        <button id=\"divide\" type=\"button\" onClick={handleOperator}>/</button>\n        <button id=\"decimal\" type=\"button\" onClick={handleDot}>.</button>\n        <button id=\"clear\" type=\"button\" onClick={handleClear}>C</button>\n      </div>\n      <div>\n        answer: {answer} |\n        next: {next} |\n        operator: {operator} |\n        previous: {previous}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}